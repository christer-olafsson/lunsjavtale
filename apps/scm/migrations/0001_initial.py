# Generated by Django 5.0.3 on 2024-04-02 13:27

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'lunsjavtale_ingredients',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True, help_text='Category description for showing over page.', null=True)),
                ('logo_url', models.TextField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='scm.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'db_table': 'lunsjavtale_categories',
                'ordering': ['-id'],
                'unique_together': {('name', 'parent')},
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('actual_price', models.DecimalField(blank=True, decimal_places=2, default=1, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('discount_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('price', models.DecimalField(blank=True, decimal_places=2, default=1, help_text='price after discount', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_percent', models.DecimalField(blank=True, decimal_places=2, default=50, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('price_with_tax', models.DecimalField(blank=True, decimal_places=2, help_text='price adding TAX & discount', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Final price')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('photo_url', models.TextField(blank=True, null=True)),
                ('contains', models.JSONField(blank=True, null=True)),
                ('availability', models.BooleanField(default=True)),
                ('visitor_count', models.PositiveIntegerField(default=0, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='scm.category')),
                ('ingredients', models.ManyToManyField(blank=True, to='scm.ingredient')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'lunsjavtale_products',
                'ordering': ['-id'],
            },
        ),
    ]
